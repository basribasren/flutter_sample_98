import '../task_allocator_screen/widgets/taskallocator_item_widget.dart';import 'bloc/task_allocator_bloc.dart';import 'models/task_allocator_model.dart';import 'models/taskallocator_item_model.dart';import 'package:basri_s_application9/core/app_export.dart';import 'package:basri_s_application9/widgets/app_bar/appbar_image.dart';import 'package:basri_s_application9/widgets/app_bar/appbar_subtitle_1.dart';import 'package:basri_s_application9/widgets/app_bar/custom_app_bar.dart';import 'package:basri_s_application9/widgets/custom_drop_down.dart';import 'package:basri_s_application9/widgets/custom_floating_button.dart';import 'package:flutter/material.dart';class TaskAllocatorScreen extends StatelessWidget {static Widget builder(BuildContext context) { return BlocProvider<TaskAllocatorBloc>(create: (context) => TaskAllocatorBloc(TaskAllocatorState(taskAllocatorModelObj: TaskAllocatorModel()))..add(TaskAllocatorInitialEvent()), child: TaskAllocatorScreen()); } 
@override Widget build(BuildContext context) { return SafeArea(child: Scaffold(backgroundColor: ColorConstant.gray5001, appBar: CustomAppBar(height: getVerticalSize(53), leadingWidth: 40, leading: AppbarImage(height: getSize(24), width: getSize(24), svgPath: ImageConstant.imgArrowleft, margin: getMargin(left: 16, top: 12, bottom: 17), onTap: () {onTapArrowleft84(context);}), centerTitle: true, title: AppbarSubtitle1(text: "lbl_task_management".tr), actions: [AppbarImage(height: getSize(24), width: getSize(24), svgPath: ImageConstant.imgOverflowmenu1, margin: getMargin(left: 16, top: 12, right: 16, bottom: 17))]), body: Container(width: double.maxFinite, child: Column(mainAxisSize: MainAxisSize.min, mainAxisAlignment: MainAxisAlignment.start, children: [Align(alignment: Alignment.centerLeft, child: Padding(padding: getPadding(left: 16, top: 25), child: Text("msg_select_department".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: AppStyle.txtGilroySemiBold18))), BlocSelector<TaskAllocatorBloc, TaskAllocatorState, TaskAllocatorModel?>(selector: (state) => state.taskAllocatorModelObj, builder: (context, taskAllocatorModelObj) {return CustomDropDown(focusNode: FocusNode(), icon: Container(margin: getMargin(left: 30, right: 16), child: CustomImageView(svgPath: ImageConstant.imgArrowdownBlueGray200)), hintText: "lbl_design".tr, margin: getMargin(left: 16, top: 17, right: 16), variant: DropDownVariant.OutlineBluegray100, shape: DropDownShape.RoundedBorder6, padding: DropDownPadding.PaddingT7, fontStyle: DropDownFontStyle.GilroyMedium14, items: taskAllocatorModelObj?.dropdownItemList ?? [], onChanged: (value) {context.read<TaskAllocatorBloc>().add(ChangeDropDownEvent(value: value));});}), Padding(padding: getPadding(left: 16, top: 16, right: 16, bottom: 256), child: BlocSelector<TaskAllocatorBloc, TaskAllocatorState, TaskAllocatorModel?>(selector: (state) => state.taskAllocatorModelObj, builder: (context, taskAllocatorModelObj) {return ListView.separated(physics: NeverScrollableScrollPhysics(), shrinkWrap: true, separatorBuilder: (context, index) {return SizedBox(height: getVerticalSize(16));}, itemCount: taskAllocatorModelObj?.taskallocatorItemList.length ?? 0, itemBuilder: (context, index) {TaskallocatorItemModel model = taskAllocatorModelObj?.taskallocatorItemList[index] ?? TaskallocatorItemModel(); return TaskallocatorItemWidget(model, onTapImgFile: () {onTapImgFile(context);});});}))])), floatingActionButton: CustomFloatingButton(height: 60, width: 60, child: CustomImageView(svgPath: ImageConstant.imgPlus, height: getVerticalSize(30.0), width: getHorizontalSize(30.0))))); } 
onTapImgFile(BuildContext context) async  { await PermissionManager.askForPermission(Permission.storage); List<String?>? fileList = []; FileManager().filePickerMethod(1000 * 1000, ['pdf', 'doc'], getFiles: (value) {fileList = value;}); } 
onTapArrowleft84(BuildContext context) { NavigatorService.goBack(); } 
 }
